// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Description");

                    b.Property<bool>("Hiddenn");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<Guid?>("ValueId");

                    b.Property<Guid>("ValueParentId");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ValueId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("DataAccess.Entities.EntityRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityId");

                    b.Property<Guid>("EntityParentId");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityParentId");

                    b.ToTable("EntityRelations");
                });

            modelBuilder.Entity("DataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<Guid>("EntityId");

                    b.Property<string>("MimeType");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<Guid?>("RefreshToken");

                    b.HasKey("Id");

                    b.HasIndex("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.Value", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateTimeValue");

                    b.Property<double?>("DoubleValue");

                    b.Property<int?>("IntValue");

                    b.Property<string>("StringValue");

                    b.HasKey("Id");

                    b.HasIndex("IntValue", "DoubleValue", "DateTimeValue", "StringValue");

                    b.ToTable("Value");
                });

            modelBuilder.Entity("DataAccess.Entities.Entity", b =>
                {
                    b.HasOne("DataAccess.Entities.Entity", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");
                });

            modelBuilder.Entity("DataAccess.Entities.EntityRelation", b =>
                {
                    b.HasOne("DataAccess.Entities.Entity", "Entity")
                        .WithMany("Parents")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Entity", "EntityParent")
                        .WithMany()
                        .HasForeignKey("EntityParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
